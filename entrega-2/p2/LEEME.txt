Pon en esta carpeta el código de filosofos.c, maestro.c y si has usado algún otro código .c auxiliar
junto con el Makefile que compila todo.

Recuerda añadir comentarios // FASE X a las líneas que hayas modificado, como se explica en el
enunciado del entregable.

Añade a este LEEME.txt la explicación de cómo has resuelto la Fase 4, si la has hecho. Puedes añadir
también cualquier comentario que consideres relevante.


-----------------------
EXPLICACION DE LA FASE4
-----------------------

Para evitar el posible problema de starvation, he optado por utilizar semaforos, cada semaforo va a actuar como un contador
de permisos para poder adquirir los palillos, el semaforo lo he establecido con un valor maximo, que representa la cantidad
maxima de filosofos que pueden comer simultaneamente.
Cuando un filosofo quiera comer intenta adquirir el permiso del semaforo, si tiene permisos disponibles, el filosofo puede
adquirir los palillos y comer, despues de haber finalizado de comer se libera el permiso

------
CODIGO
------

// Declaración del semáforo y el contador máximo de filósofos comiendo simultáneamente
sem_t sem_mutex;
int MAX_CONCURRENT_EATERS = 2 // LO HE FIJADO EN 2 FILOSOFOS

En el main:
// Inicializar el semáforo
    sem_init(&sem_mutex, 0, MAX_CONCURRENT_EATERS);

En filosofo:
// Intentar adquirir un permiso del semáforo antes de comer
        sem_wait(&sem_mutex);


// Después de comer, liberar el permiso del semáforo
        sem_post(&sem_mutex);


----------
CONCLUSION
----------

Con este cambio, garantizamos que solo un número máximo de filósofos puedan comer simultáneamente,
evitando así que todos los filósofos intenten adquirir los palillos al mismo tiempo y
se queden bloqueados en un estado de starvation.
